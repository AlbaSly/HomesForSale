/*
 * ATTENTION: The "eval" devtool has been used (maybe by default in mode: "development").
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => { // webpackBootstrap
/******/ 	var __webpack_modules__ = ({

/***/ "./app/public/src/index-global-map.js":
/*!********************************************!*\
  !*** ./app/public/src/index-global-map.js ***!
  \********************************************/
/***/ (() => {

eval("(async () => {\r\n\r\n    //User coords\r\n    const userCoords = await getUserLocation();\r\n    const lat = userCoords.latitude;\r\n    const lng = userCoords.longitude;\r\n\r\n    //Map\r\n    const map = await L.map('map').setView([lat, lng], 13);\r\n    L.tileLayer('https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png', {\r\n            attribution: '&copy; <a href=\"https://www.openstreetmap.org/copyright\">OpenStreetMap</a> contributors'\r\n    }).addTo(map);\r\n\r\n    //Current User Location Marker\r\n    const userMarker = new L.marker([lat, lng], {\r\n        draggable: false,\r\n        autoPan: true,\r\n        icon: new L.Icon({\r\n            iconUrl: 'https://raw.githubusercontent.com/pointhi/leaflet-color-markers/master/img/marker-icon-green.png',\r\n            shadowUrl: 'https://cdnjs.cloudflare.com/ajax/libs/leaflet/0.7.7/images/marker-shadow.png',\r\n        })\r\n    }).addTo(map).bindPopup(`<h3 class=\"text-red-400 block text-center\">You</h3>`);\r\n\r\n    //Marker group\r\n    let markerGroup = L.layerGroup().addTo(map);\r\n\r\n    //Important values\r\n    let PROPERTIES_LIST = await getPropertiesList();\r\n    reloadMarkers();\r\n\r\n    //HTML\r\n    const html_input_minPrice = document.querySelector('#minPrice');\r\n    const html_input_maxPrice = document.querySelector('#maxPrice');\r\n    const html_select_category_type = document.querySelector('#categories');\r\n    const html_button_search = document.querySelector('#search');\r\n\r\n    //initial query params after refresh the page;\r\n    const params = new URLSearchParams(window.location.search);\r\n    \r\n    async function getPropertiesList(paramObj) {\r\n        // let queryParamBuilder = '?';\r\n        // if (!paramObj) {\r\n        //     for (let key of params.keys()) {\r\n        //         const entry = `${key}=${params.get(key)}`;\r\n            \r\n        //         queryParamBuilder = queryParamBuilder + entry + '&';\r\n        //     }\r\n        //     queryParamBuilder = queryParamBuilder.substring(0, queryParamBuilder.length-1);\r\n        // }\r\n\r\n        // const url = `http://${location.host}/properties/public/list${queryParamBuilder.length > 1 ? queryParamBuilder : ''}`;\r\n        const url = `http://${location.host}/properties/public/list?${paramObj && paramObj.length > 1 ? paramObj : ''}`;\r\n\r\n        const response = await fetch(url);\r\n        const {data: {propertiesList}} = await response.json();\r\n\r\n        return propertiesList;\r\n    }\r\n\r\n    function getUserLocation() {\r\n        return new Promise(async (resolve, reject) => {\r\n            navigator.geolocation.getCurrentPosition(\r\n                ({coords: {longitude, latitude}}) => {\r\n                    const coords = {\r\n                        longitude,\r\n                        latitude\r\n                    }\r\n\r\n                    resolve(coords);\r\n                },\r\n                (err) => {\r\n                    console.error(err);\r\n                    alert('You must need have location in this page to access the map view');\r\n                    reject(err);\r\n                },\r\n                {\r\n                    enableHighAccuracy: true,\r\n                    maximumAge: 0,\r\n                    timeout: 10000\r\n                }\r\n            );\r\n        });\r\n    }\r\n\r\n    function reloadMarkers() {\r\n        markerGroup.clearLayers();\r\n\r\n        PROPERTIES_LIST.forEach(property => {\r\n            const marker = new L.marker([property.location.latitude, property.location.longitude], {\r\n                draggable: false,\r\n                autoPan: true\r\n            }).addTo(markerGroup).bindPopup(\r\n                `\r\n                    <div class=\"h-5 text-center\">\r\n                        <h3 class=\"text-lg font-bold\">${property.title}</h3>\r\n                        <img class=\"\" src=${property.image ? `/img/server/${property.vendor}/uploads/${property.id_property}/${property.image}` : '/img/unknow-house.jpg'} alt=\"Image from ${property.title}\">\r\n                        <a href=\"/app/property/view/${property.id_property}\" class=\"text-center p-2 block w-full bg-orange-400 hover:bg-orange-500 text-white\">More Info</a>\r\n                    </div>\r\n                `\r\n            );\r\n        });\r\n    }\r\n\r\n    html_button_search.onclick = async () => {\r\n        let queryParamBuilder = [];\r\n\r\n        const params = {\r\n            category: html_select_category_type.value,\r\n            minPrice: html_input_minPrice.value,\r\n            maxPrice: html_input_maxPrice.value,\r\n        }\r\n\r\n        // Object.keys(params).forEach((key) => {\r\n        //     const keyName = key;\r\n\r\n        //     const entry = `${keyName}=${params[keyName]}`;\r\n\r\n        //     if (params[keyName] && params[keyName] !== 'null') {\r\n        //         queryParamBuilder = queryParamBuilder + entry + '&';\r\n        //     }\r\n        // });\r\n        // queryParamBuilder = queryParamBuilder.substring(0, queryParamBuilder.length-1); console.log(queryParamBuilder);\r\n\r\n        Object.keys(params).forEach(key => {\r\n            queryParamBuilder.push(encodeURIComponent(key) + '=' + encodeURIComponent(params[key]));\r\n        });\r\n\r\n        queryParamBuilder = queryParamBuilder.join('&');\r\n\r\n        //Call API and fill map\r\n        PROPERTIES_LIST = await getPropertiesList(queryParamBuilder);\r\n        reloadMarkers();\r\n    }\r\n\r\n    /**RESPONSIVE SECTION**/\r\n\r\n    //HTML (responsive);\r\n    const html_div_menu = document.querySelector('.navbar-menu');\r\n    const html_input_minPrice__responsive = document.querySelector('#minPrice__responsive');\r\n    const html_input_maxPrice__responsive = document.querySelector('#maxPrice__responsive');\r\n    const html_select_category_type__responsive = document.querySelector('#categories__responsive');\r\n    const html_button_search__responsive = document.querySelector('#search__responsive');\r\n\r\n    //Responsive search button\r\n    html_button_search__responsive.onclick = async () => {\r\n        let queryParamBuilder = [];\r\n\r\n        const params = {\r\n            category: html_select_category_type__responsive.value,\r\n            minPrice: html_input_minPrice__responsive.value,\r\n            maxPrice: html_input_maxPrice__responsive.value,\r\n        }\r\n\r\n        Object.keys(params).forEach(key => {\r\n            queryParamBuilder.push(encodeURIComponent(key) + '=' + encodeURIComponent(params[key]));\r\n        });\r\n\r\n        queryParamBuilder = queryParamBuilder.join('&');\r\n\r\n        //Call API and fill map\r\n        PROPERTIES_LIST = await getPropertiesList(queryParamBuilder);\r\n        reloadMarkers();\r\n\r\n        html_div_menu.classList.toggle('hidden');\r\n    }\r\n})();\n\n//# sourceURL=webpack://homesforsale/./app/public/src/index-global-map.js?");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module can't be inlined because the eval devtool is used.
/******/ 	var __webpack_exports__ = {};
/******/ 	__webpack_modules__["./app/public/src/index-global-map.js"]();
/******/ 	
/******/ })()
;